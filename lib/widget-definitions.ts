import {
  TypeIcon,
  SquareIcon,
  ImageIcon,
  RowsIcon,
  ColumnsIcon,
  ContainerIcon,
  RectangleHorizontalIcon,
  CaseSensitiveIcon,
  ToggleLeftIcon,
  CheckSquareIcon,
  CircleDotIcon,
  UserCircle2Icon,
  SmileIcon,
  Heading1,
  ChevronDownIcon,
  CalendarIcon,
  CircleIcon,
  AlertTriangleIcon,
  ListIcon,
  LayersIcon,
  PanelLeftOpenIcon,
  AppWindowIcon,
  PanelBottomIcon,
  TablePropertiesIcon,
  SlidersIcon,
  TableIcon,
} from "lucide-react"
import { ComponentTypes, type WidgetPaletteItem, type PropertyDefinition } from "./json-builder-types"

// Propiedades b√°sicas simplificadas - solo lo esencial
const basicProps: PropertyDefinition[] = [
  { name: "backgroundColor", label: "Background Color", type: "color", defaultValue: "" },
  { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
  { name: "height", label: "Height (px)", type: "string", defaultValue: "" },
]

const alignmentProps: PropertyDefinition[] = [
  {
    name: "textAlign",
    label: "Text Alignment",
    type: "select",
    options: [
      { label: "Left", value: "left" },
      { label: "Center", value: "center" },
      { label: "Right", value: "right" },
      { label: "Justify", value: "justify" },
    ],
    defaultValue: "left",
  },
  {
    name: "alignSelf",
    label: "Self Alignment",
    type: "select",
    options: [
      { label: "Auto", value: "auto" },
      { label: "Start", value: "flex-start" },
      { label: "Center", value: "center" },
      { label: "End", value: "flex-end" },
      { label: "Stretch", value: "stretch" },
    ],
    defaultValue: "flex-start",
  },
]

const containerAlignmentProps: PropertyDefinition[] = [
  {
    name: "mainAxisAlignment",
    label: "Main Axis Alignment",
    type: "select",
    options: [
      { label: "Start", value: "flex-start" },
      { label: "Center", value: "center" },
      { label: "End", value: "flex-end" },
      { label: "Space Between", value: "space-between" },
      { label: "Space Around", value: "space-around" },
      { label: "Space Evenly", value: "space-evenly" },
    ],
    defaultValue: "flex-start",
  },
  {
    name: "crossAxisAlignment",
    label: "Cross Axis Alignment",
    type: "select",
    options: [
      { label: "Start", value: "flex-start" },
      { label: "Center", value: "center" },
      { label: "End", value: "flex-end" },
      { label: "Stretch", value: "stretch" },
      { label: "Baseline", value: "baseline" },
    ],
    defaultValue: "stretch",
  },
]

export const WIDGET_PALETTE_ITEMS: WidgetPaletteItem[] = [
  // Layout Containers
  {
    type: ComponentTypes.CONTAINER,
    label: "Container",
    icon: ContainerIcon,
    defaultProps: { backgroundColor: "#f9fafb", width: "100%", height: "auto", minHeight: "100px" },
    isContainer: true,
    iconColorClass: "text-gray-500",
    editableProps: [...containerAlignmentProps, ...basicProps],
  },
  {
    type: ComponentTypes.ROW,
    label: "Row",
    icon: RowsIcon,
    defaultProps: { gap: 8, width: "100%", height: "auto" },
    isContainer: true,
    iconColorClass: "text-purple-600",
    editableProps: [
      { name: "gap", label: "Gap Between Items", type: "number", defaultValue: 8 },
      ...containerAlignmentProps,
      ...basicProps,
    ],
  },
  {
    type: ComponentTypes.COLUMN,
    label: "Column",
    icon: ColumnsIcon,
    defaultProps: { gap: 8, width: "100%", height: "auto" },
    isContainer: true,
    iconColorClass: "text-green-600",
    editableProps: [
      { name: "gap", label: "Gap Between Items", type: "number", defaultValue: 8 },
      ...containerAlignmentProps,
      ...basicProps,
    ],
  },
  {
    type: ComponentTypes.STACK,
    label: "Stack",
    icon: LayersIcon,
    defaultProps: { width: "100%", height: "150px", backgroundColor: "#e0e7ff" },
    isContainer: true,
    iconColorClass: "text-blue-600",
    editableProps: [...containerAlignmentProps, ...basicProps],
  },
  {
    type: ComponentTypes.CARD,
    label: "Card",
    icon: RectangleHorizontalIcon,
    defaultProps: { backgroundColor: "#ffffff", elevation: 1, width: "100%", height: "auto" },
    isContainer: true,
    iconColorClass: "text-orange-500",
    editableProps: [
      { name: "elevation", label: "Elevation (Shadow)", type: "number", defaultValue: 1 },
      ...containerAlignmentProps,
      ...basicProps,
    ],
  },
  {
    type: ComponentTypes.LIST_VIEW,
    label: "List View",
    icon: ListIcon,
    defaultProps: { gap: 4, width: "100%", height: "auto" },
    isContainer: true,
    allowedChildren: [ComponentTypes.LIST_TILE],
    iconColorClass: "text-indigo-600",
    editableProps: [
      { name: "gap", label: "Gap Between Items", type: "number", defaultValue: 4 },
      ...containerAlignmentProps,
      ...basicProps,
    ],
  },
  {
    type: ComponentTypes.LIST_TILE,
    label: "List Tile",
    icon: ListIcon,
    defaultProps: {
      title: "List Item",
      subtitle: "Subtitle text",
      icon: { icon: "Circle", color: "#666666" },
      width: "100%",
      height: "auto",
      check: false,
      titleColor: "#000000",
      subtitleColor: "#666666",
      tileBackgroundColor: "#ffffff",
      borderColor: "#e0e0e0",
      borderWidth: 1,
      borderRadius: 4,
    },
    isContainer: false,
    iconColorClass: "text-gray-600",
    editableProps: [
      { name: "title", label: "Title", type: "string", defaultValue: "List Item" },
      { name: "subtitle", label: "Subtitle", type: "string", defaultValue: "Subtitle text" },
      { name: "titleColor", label: "Title Color", type: "color", defaultValue: "#000000" },
      { name: "subtitleColor", label: "Subtitle Color", type: "color", defaultValue: "#666666" },
      { name: "tileBackgroundColor", label: "Background", type: "color", defaultValue: "#ffffff" },
      { name: "borderColor", label: "Border Color", type: "color", defaultValue: "#e0e0e0" },
      { name: "borderWidth", label: "Border Width", type: "number", defaultValue: 1 },
      { name: "borderRadius", label: "Border Radius", type: "number", defaultValue: 4 },
      { name: "iconData", label: "Icon", type: "icon", defaultValue: null },
      { name: "check", label: "Show Checkmark", type: "boolean", defaultValue: false },
      ...alignmentProps,
      ...basicProps,
    ],
  },
  {
    type: ComponentTypes.DRAWER,
    label: "Drawer",
    icon: PanelLeftOpenIcon,
    defaultProps: { width: "100%", backgroundColor: "#ffffff", height: "100%" },
    isContainer: true,
    iconColorClass: "text-gray-700",
    editableProps: [...containerAlignmentProps, ...basicProps],
  },

  // Navigation Widgets
  {
    type: ComponentTypes.APP_BAR,
    label: "App Bar",
    icon: AppWindowIcon,
    defaultProps: {
      title: "App Title",
      backgroundColor: "#2563eb",
      textColor: "#ffffff",
      height: "56px",
      width: "100%",
    },
    isContainer: false,
    iconColorClass: "text-blue-700",
    editableProps: [
      { name: "title", label: "Title", type: "string", defaultValue: "App Title" },
      { name: "backgroundColor", label: "Background Color", type: "color", defaultValue: "#2563eb" },
      { name: "textColor", label: "Text Color", type: "color", defaultValue: "#ffffff" },
      { name: "height", label: "Height (px)", type: "string", defaultValue: "56px" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.BOTTOM_NAVIGATION_BAR,
    label: "Bottom Nav Bar",
    icon: PanelBottomIcon,
    defaultProps: {
      items: [
        { label: "Home", icon: "Home" },
        { label: "Search", icon: "Search" },
        { label: "Profile", icon: "User" },
      ],
      backgroundColor: "#ffffff",
      height: "56px",
      width: "100%",
      selectedIndex: 0,
      textColor: "#6b7280",
      selectedItemColor: "#2563eb",
      routes: ["/home", "/search", "/profile"],
    },
    isContainer: false,
    iconColorClass: "text-purple-700",
    editableProps: [
      { name: "bottomNavData", label: "Navigation Items", type: "bottomNav", defaultValue: null },
      ...alignmentProps,
      ...basicProps,
    ],
  },
  {
    type: ComponentTypes.TAB_BAR,
    label: "Tab Bar",
    icon: TablePropertiesIcon,
    defaultProps: {
      items: ["Tab 1", "Tab 2", "Tab 3"],
      width: "100%",
      height: "auto",
    },
    isContainer: false,
    iconColorClass: "text-blue-600",
    editableProps: [
      { name: "dropdownData", label: "Tab Items", type: "dropdown", defaultValue: null },
      ...alignmentProps,
      ...basicProps,
    ],
  },

  // Basic Widgets
  {
    type: ComponentTypes.TEXT,
    label: "Text",
    icon: TypeIcon,
    defaultProps: {
      text: "Sample Text",
      fontSize: 16,
      textColor: "#000000",
      width: "auto",
      height: "auto",
      alignSelf: "flex-start",
      bold: false,
    },
    isContainer: false,
    iconColorClass: "text-gray-600",
    editableProps: [
      { name: "text", label: "Text", type: "string", defaultValue: "Sample Text" },
      { name: "fontSize", label: "Font Size", type: "number", defaultValue: 16 },
      { name: "textColor", label: "Text Color", type: "color", defaultValue: "#000000" },
      { name: "bold", label: "Bold", type: "boolean", defaultValue: false },
      { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
      { name: "height", label: "Height (px)", type: "string", defaultValue: "" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.HEADING,
    label: "Heading",
    icon: Heading1,
    defaultProps: {
      text: "Heading",
      fontSize: 24,
      textColor: "#000000",
      width: "auto",
      height: "auto",
      alignSelf: "flex-start",
      bold: true,
    },
    isContainer: false,
    iconColorClass: "text-gray-800",
    editableProps: [
      { name: "text", label: "Text", type: "string", defaultValue: "Heading" },
      { name: "fontSize", label: "Font Size", type: "number", defaultValue: 24 },
      { name: "textColor", label: "Text Color", type: "color", defaultValue: "#000000" },
      { name: "bold", label: "Bold", type: "boolean", defaultValue: true },
      { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
      { name: "height", label: "Height (px)", type: "string", defaultValue: "" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.IMAGE,
    label: "Image",
    icon: ImageIcon,
    defaultProps: {
      src: "/placeholder.svg?height=100&width=150",
      alt: "Image",
      width: "100%",
      height: "auto",
      alignSelf: "flex-start",
    },
    isContainer: false,
    iconColorClass: "text-green-500",
    editableProps: [
      { name: "src", label: "Image URL", type: "string", defaultValue: "/placeholder.svg" },
      { name: "alt", label: "Alt Text", type: "string", defaultValue: "Image" },
      { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
      { name: "height", label: "Height (px)", type: "string", defaultValue: "" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.ICON,
    label: "Icon",
    icon: SmileIcon,
    defaultProps: {
      iconName: "Smile",
      iconSize: 24,
      iconColor: "#000000",
      width: "auto",
      height: "auto",
      alignSelf: "flex-start",
    },
    isContainer: false,
    iconColorClass: "text-yellow-500",
    editableProps: [
      { name: "iconData", label: "Icon", type: "icon", defaultValue: null },
      { name: "iconSize", label: "Size (px)", type: "number", defaultValue: 24 },
      { name: "iconColor", label: "Color", type: "color", defaultValue: "#000000" },
      { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
      { name: "height", label: "Height (px)", type: "string", defaultValue: "" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.BUTTON,
    label: "Button",
    icon: SquareIcon,
    defaultProps: {
      label: "Button",
      variant: "default",
      width: "auto",
      height: "auto",
      alignSelf: "flex-start",
      buttonWidth: "",
      buttonHeight: "",
      buttonBackgroundColor: "",
      buttonTextColor: "",
    },
    isContainer: false,
    iconColorClass: "text-blue-600",
    editableProps: [
      { name: "label", label: "Button Text", type: "string", defaultValue: "Button" },
      {
        name: "variant",
        label: "Style Variant",
        type: "select",
        options: [
          { label: "Default", value: "default" },
          { label: "Secondary", value: "secondary" },
          { label: "Outline", value: "outline" },
          { label: "Ghost", value: "ghost" },
          { label: "Destructive", value: "destructive" },
        ],
        defaultValue: "default",
      },
      { name: "buttonWidth", label: "Width (px)", type: "string", defaultValue: "" },
      { name: "buttonHeight", label: "Height (px)", type: "string", defaultValue: "" },
      { name: "buttonBackgroundColor", label: "Background Color", type: "color", defaultValue: "" },
      { name: "buttonTextColor", label: "Text Color", type: "color", defaultValue: "" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.TEXT_FIELD,
    label: "Text Field",
    icon: CaseSensitiveIcon,
    defaultProps: {
      placeholder: "Enter text...",
      label: "Field Label",
      width: "100%",
      height: "auto",
      alignSelf: "flex-start",
    },
    isContainer: false,
    iconColorClass: "text-blue-500",
    editableProps: [
      { name: "label", label: "Label", type: "string", defaultValue: "Field Label" },
      { name: "placeholder", label: "Placeholder", type: "string", defaultValue: "Enter text..." },
      { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
      { name: "height", label: "Height (px)", type: "string", defaultValue: "" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.CHECKBOX,
    label: "Checkbox",
    icon: CheckSquareIcon,
    defaultProps: { label: "Accept terms", width: "auto", height: "auto", alignSelf: "flex-start", value: false },
    isContainer: false,
    iconColorClass: "text-green-500",
    editableProps: [
      { name: "label", label: "Label", type: "string", defaultValue: "Checkbox" },
      { name: "value", label: "Checked", type: "boolean", defaultValue: false },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.SWITCH,
    label: "Switch",
    icon: ToggleLeftIcon,
    defaultProps: { label: "Enable feature", width: "auto", height: "auto", alignSelf: "flex-start", value: false },
    isContainer: false,
    iconColorClass: "text-green-500",
    editableProps: [
      { name: "label", label: "Label", type: "string", defaultValue: "Switch" },
      { name: "value", label: "On", type: "boolean", defaultValue: false },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.RADIO_GROUP,
    label: "Radio Group",
    icon: CircleDotIcon,
    defaultProps: {
      label: "Option A",
      options: "Option A,Option B,Option C",
      width: "auto",
      height: "auto",
      alignSelf: "flex-start",
      value: "Option A",
    },
    isContainer: false,
    iconColorClass: "text-green-500",
    editableProps: [
      { name: "radioOptions", label: "Radio Options", type: "dropdown", defaultValue: null },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.DROPDOWN,
    label: "Dropdown",
    icon: ChevronDownIcon,
    defaultProps: {
      label: "Select",
      items: "Option 1,Option 2,Option 3",
      width: "100%",
      height: "auto",
      alignSelf: "flex-start",
      value: "Option 1",
    },
    isContainer: false,
    iconColorClass: "text-gray-600",
    editableProps: [
      { name: "dropdownData", label: "Dropdown Options", type: "dropdown", defaultValue: null },
      { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.SLIDER,
    label: "Slider",
    icon: SlidersIcon,
    defaultProps: { value: 50, min: 0, max: 100, width: "100%", height: "auto", alignSelf: "flex-start" },
    isContainer: false,
    iconColorClass: "text-blue-500",
    editableProps: [
      { name: "value", label: "Value", type: "number", defaultValue: 50 },
      { name: "min", label: "Minimum", type: "number", defaultValue: 0 },
      { name: "max", label: "Maximum", type: "number", defaultValue: 100 },
      { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.DATE_PICKER,
    label: "Date Picker",
    icon: CalendarIcon,
    defaultProps: { placeholder: "Select a date", width: "100%", height: "auto", alignSelf: "flex-start" },
    isContainer: false,
    iconColorClass: "text-orange-500",
    editableProps: [
      { name: "placeholder", label: "Placeholder", type: "string", defaultValue: "Select a date" },
      { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.CIRCLE_AVATAR,
    label: "Circle Avatar",
    icon: UserCircle2Icon,
    defaultProps: {
      avatarSrc: "/placeholder.svg?height=40&width=40",
      avatarFallback: "U",
      size: 40,
      width: "auto",
      height: "auto",
      alignSelf: "flex-start",
    },
    isContainer: false,
    iconColorClass: "text-indigo-500",
    editableProps: [
      { name: "avatarSrc", label: "Avatar URL", type: "string", defaultValue: "" },
      { name: "avatarFallback", label: "Initials", type: "string", defaultValue: "U" },
      { name: "size", label: "Size (px)", type: "number", defaultValue: 40 },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.CHIP,
    label: "Chip",
    icon: CircleIcon,
    defaultProps: { text: "Label", variant: "default", width: "auto", height: "auto", alignSelf: "flex-start" },
    isContainer: false,
    iconColorClass: "text-gray-600",
    editableProps: [
      { name: "text", label: "Text", type: "string", defaultValue: "Chip" },
      {
        name: "variant",
        label: "Variant",
        type: "select",
        options: [
          { label: "Default", value: "default" },
          { label: "Outline", value: "outline" },
        ],
        defaultValue: "default",
      },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.ALERT_DIALOG,
    label: "Alert Dialog",
    icon: AlertTriangleIcon,
    defaultProps: {
      dialogTitle: "Confirm Action",
      dialogContent: "Are you sure you want to proceed with this action?",
      confirmButtonText: "Confirm",
      cancelButtonText: "Cancel",
      dialogType: "warning",
      dialogIcon: "AlertTriangle",
      showIcon: true,
      barrierDismissible: true,
      buttonLayout: "horizontal",
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
      width: "100%",
      height: "auto",
      alignSelf: "flex-start",
    },
    isContainer: false,
    iconColorClass: "text-red-500",
    editableProps: [
      { name: "dialogTitle", label: "Title", type: "string", defaultValue: "Confirm Action" },
      {
        name: "dialogContent",
        label: "Content",
        type: "string",
        defaultValue: "Are you sure you want to proceed with this action?",
      },
      { name: "confirmButtonText", label: "Confirm Button Text", type: "string", defaultValue: "Confirm" },
      { name: "cancelButtonText", label: "Cancel Button Text", type: "string", defaultValue: "Cancel" },
      {
        name: "dialogType",
        label: "Dialog Type",
        type: "select",
        options: [
          { label: "Info", value: "info" },
          { label: "Warning", value: "warning" },
          { label: "Error", value: "error" },
          { label: "Success", value: "success" },
          { label: "Question", value: "question" },
        ],
        defaultValue: "warning",
      },
      { name: "dialogIcon", label: "Icon", type: "string", defaultValue: "AlertTriangle" },
      { name: "showIcon", label: "Show Icon", type: "boolean", defaultValue: true },
      { name: "barrierDismissible", label: "Dismissible", type: "boolean", defaultValue: true },
      {
        name: "buttonLayout",
        label: "Button Layout",
        type: "select",
        options: [
          { label: "Horizontal", value: "horizontal" },
          { label: "Vertical", value: "vertical" },
        ],
        defaultValue: "horizontal",
      },
      { name: "confirmButtonColor", label: "Confirm Button Color", type: "color", defaultValue: "#dc2626" },
      { name: "cancelButtonColor", label: "Cancel Button Color", type: "color", defaultValue: "#6b7280" },
      ...alignmentProps,
    ],
  },
  {
    type: ComponentTypes.DATA_TABLE,
    label: "Data Table",
    icon: TableIcon,
    defaultProps: {
      columns: ["Column 1", "Column 2", "Column 3"],
      rows: [
        ["Row 1 Col 1", "Row 1 Col 2", "Row 1 Col 3"],
        ["Row 2 Col 1", "Row 2 Col 2", "Row 2 Col 3"],
      ],
      width: "100%",
      height: "auto",
      alignSelf: "flex-start",
    },
    isContainer: false,
    iconColorClass: "text-blue-700",
    editableProps: [
      { name: "tableData", label: "Table Data", type: "table", defaultValue: null },
      { name: "width", label: "Width (px)", type: "string", defaultValue: "" },
      ...alignmentProps,
    ],
  },
]

export const WIDGET_CATEGORIES = [
  {
    name: "Layout",
    types: [
      ComponentTypes.CONTAINER,
      ComponentTypes.ROW,
      ComponentTypes.COLUMN,
      ComponentTypes.STACK,
      ComponentTypes.CARD,
      ComponentTypes.LIST_VIEW,
      ComponentTypes.DRAWER,
    ],
  },
  {
    name: "Navigation",
    types: [ComponentTypes.APP_BAR, ComponentTypes.BOTTOM_NAVIGATION_BAR, ComponentTypes.TAB_BAR],
  },
  {
    name: "Components",
    types: [
      ComponentTypes.TEXT,
      ComponentTypes.HEADING,
      ComponentTypes.IMAGE,
      ComponentTypes.ICON,
      ComponentTypes.BUTTON,
      ComponentTypes.TEXT_FIELD,
      ComponentTypes.CHECKBOX,
      ComponentTypes.SWITCH,
      ComponentTypes.RADIO_GROUP,
      ComponentTypes.DROPDOWN,
      ComponentTypes.SLIDER,
      ComponentTypes.DATE_PICKER,
      ComponentTypes.CIRCLE_AVATAR,
      ComponentTypes.CHIP,
      ComponentTypes.LIST_TILE,
      ComponentTypes.DATA_TABLE,
      ComponentTypes.ALERT_DIALOG,
    ],
  },
]

// Debug logs
console.log("üöÄ WIDGET_PALETTE_ITEMS loaded:", WIDGET_PALETTE_ITEMS.length, "widgets")
console.log("üìÅ WIDGET_CATEGORIES loaded:", WIDGET_CATEGORIES.length, "categories")
WIDGET_CATEGORIES.forEach((cat) => {
  const itemsInCategory = WIDGET_PALETTE_ITEMS.filter((item) => cat.types.includes(item.type))
  console.log(`üìÇ ${cat.name}: ${itemsInCategory.length} widgets`)
})
